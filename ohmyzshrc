# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="my_theme"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
)

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#fpath=(/usr/local/share/zsh-completions $fpath)
export PATH=$PATH:~/bin

# allow auto-completion from work dir
#[ -d ~/work ] && cdpath+=~/work

# legacy qisrc functions
#function qp {
#  DIR=$( cd "$( dirname "$0" )" && pwd )
#  echo $DIR
#  python qp.py $@
#}
## qicd
#function qicd {
#  p=$(python -m 'qicd' $1)
#  if [[ $? -ne 0 ]]; then
#    return
#  fi
#  cd ${p}
#}
# git push origin -u

# git aliases
function gpou {
  git push -u origin $(git rev-parse --abbrev-ref HEAD):$(git rev-parse --abbrev-ref HEAD)
}
# git push -f current branch
function gpf {
  branch_name=$(git rev-parse --abbrev-ref HEAD)
  if [ "$branch_name" = master ]; then
    echo "No gpf for master!"
  else
    git push --force-with-lease origin $(git rev-parse --abbrev-ref HEAD)
  fi
}
# use a command in all repos
#function all_repos {
#  CURRENT_DIR=$(cd "$(dirname "$0")"; pwd)
#  REPOS=(
#    ~/dev/myscript/Widgets
#    ~/dev/myscript/review/Widgets
#    ~/dev/myscript/review2/Widgets
#    ~/dev/myscript/master/MultimodalInputMethod_Android/InputMethodWidgets
#    ~/dev/myscript/master/inputmethodwidgets
#    ~/dev/myscript/master/mmi2/InputMethodWidgets
#  )
#  for REPO in ${REPOS}; do
#    echo ${REPO}:
#    cd ${REPO}
#    $@
#  done
#  cd ${CURRENT_DIR}
#}

if hash qibuild 2>/dev/null;
then
  HAS_QIBUILD=1
else
  HAS_QIBUILD=0
fi

#if [ $HAS_QIBUILD == 1 ]
#then
#  function qc {
#    qibuild configure -DQI_WITH_TESTS=OFF $@
#  }
#  function qm {
#    qibuild make $@
#  }
#  function qct {
#    qibuild configure $@
#  }
#fi

function evil_git_dirty {
  [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]] && echo "*"
}

function evil_git_num_untracked_files {
  expr `git status --porcelain 2>/dev/null| grep "^??" | wc -l`
}

# update function
#function qisrc_update_merge_branch
#{
#  qisrc sync -a
#  qisrc foreach -g team/tardis/dev -- git checkout -b team/tardis/merge --track team/origin/tardis/dev
#  qisrc foreach -g team/tardis/dev -- git reset --hard origin/team/tardis/dev
#  qisrc foreach -g team/tardis/dev -- git push -f gerrit team/tardis/merge
#  qisrc foreach -g team/tardis/dev -- git checkout team/tardis/dev
#  qisrc foreach -g team/tardis/dev -- git branch -D team/tardis/merge
#}

# function reset branch on origin
function grho
{
  branchName=`git rev-parse --abbrev-ref HEAD`
  originBranchName=`git rev-parse --symbolic-full-name @{u}`
  if [[ $originBranchName == *$branchName ]]
  then
    git reset --hard origin/$branchName
  else
    echo >&2 "You surely tried something stupid"
  fi
}

# function to checkout branches and set the remotes
# with multiple remotes.
# This function is NOT needed with a single remote, see:
# http://stackoverflow.com/questions/1783405/checkout-remote-git-branch
function gitcheckoutoriginremote
{
  git checkout -b $1 origin/$1
}

# qibuild aliases
#alias qcm64='qibuild configure -DQI_EFFECTIVE_CPP=ON -DQI_WITH_TESTS=OFF -c mac64 '
#alias qctm64='qibuild configure -DQI_EFFECTIVE_CPP=ON -DQI_WITH_TESTS=ON -c mac64 '
#alias qmm64='qibuild make -c mac64 '
#alias qtrm64='qctm64 -s && qmm64 -s && qitest run -c mac64 '
#alias qcios='qibuild configure -DQI_WITH_TESTS=OFF -c ios-mac -GXcode '
#alias qmios='qibuild make -c ios-mac '
#alias qcand='qibuild configure -DQI_WITH_TESTS=OFF -c android-mac '
#alias qmand='qibuild make -c android-mac '

# git aliases: http://githowto.com/aliases
alias gs='git status '
alias ga='git add '
alias gb='git branch '
alias gc='git commit'
alias gd='git diff'
alias go='git checkout '
alias go-='git checkout -'
alias gk='gitk --all& '
alias gx='gitx --all '
alias gg='git gui&'
alias gr='git rebase '
alias gri='git rebase -i '
alias gria='git rebase -i --autosquash '

export VISUAL=vim
export EDITOR="$VISUAL"

#launch a new Qt Creator
alias qtcreator482='/Users/jfremy/app/Qt\ Creator\ 4.8.2/Qt\ creator.app/Contents/MacOS/Qt\ Creator > /dev/null 2>&1 &!'
alias qtcreator491='/Users/jfremy/app/Qt\ Creator\ 4.9.1/Qt\ creator.app/Contents/MacOS/Qt\ Creator > /dev/null 2>&1 &!'
alias qtcreator492='/Users/jfremy/app/Qt\ Creator\ 4.9.2/Qt\ creator.app/Contents/MacOS/Qt\ Creator > /dev/null 2>&1 &!'
alias qtcreator4101='/Users/jfremy/app/Qt\ Creator\ 4.10.1/Qt\ creator.app/Contents/MacOS/Qt\ Creator > /dev/null 2>&1 &!'
alias qtcreator4102='/Users/jfremy/app/Qt\ Creator\ 4.10.2/Qt\ creator.app/Contents/MacOS/Qt\ Creator > /dev/null 2>&1 &!'
alias qtcreator=qtcreator4102

#path extension for Qt
export PATH=$PATH:/Users/jfremy/sdks/Qt/5.12.2/clang_64/bin
#path extension for Python
export PATH=$PATH:/Users/jfremy/Library/Python/2.7/bin

# path default
source $ZSH/oh-my-zsh.sh

# git cherry-pick from another repo
# usage: gitcp <path> <commit>
# example: gitcp ~/dev/myscript/sdk1/sdk HEAD
function gitcp {
  git --git-dir=$1/.git format-patch -k -1 --stdout $2 | git am -3 -k
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# add rust stuff to PATH
[ -d "$HOME/.cargo/bin" ] && export PATH=$PATH:$HOME/.cargo/bin

# Add Visual Studio Code (code)
export PATH=$PATH:"$HOME/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

# pyenv stuff
[ -x "$(command -v pyenv)" ] && eval "$(pyenv init -)" && eval "$(pyenv init -)"

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# fix git completion
zstyle ':completion:*:*:git:*' script /usr/local/etc/bash_completion.d/git-completion.bash

[[ -e ~/.phpbrew/bashrc ]] && source ~/.phpbrew/bashrc

[ -f ~/.magicplan.zsh ] && source ~/.magicplan.zsh

# git fuzzy checkout
function gfuco {
  matching_branches=$(git lb | grep "$1")
  matching_branch=$(awk '{print $1}' <<< $matching_branches | head -1)
  if [ ! -z "$matching_branch" ]; then
    git co "$matching_branch"
  else
    echo "no branch matching pattern $1"
  fi
}

